Development Instance/Image setup GCP
	1. VM instance
		a. Ubuntu 18.04 base Image
 		b. Nvidia GPU
		c. 8 CPUs
		d. 16GB RAM

	2. Software setup - May need to disabled application based firewall

		#general update/upgrade
		a. sudo apt-get update
		b. sudo apt-get upgrade

		#python modules
		a. sudo apt-get install python3-pip
		b. python3 -m pip install --upgrade pip==18.1.0
		c. python3 -m pip install opencv_python==3.4.3.18 numpy==1.16.1 tensorflow-gpu==1.12.0 pyzmq==17.1.2

		#compression software (dataset stored as .7z on gcp bucket data-share)
		a. sudo apt-get install p7zip-full
		
		#database
		a. sudo apt-get install mysql-server

		#monitoring Software
		a. sudo apt-get install iotop (monitors disk io)
		b. htop (preinstalled)
		c. watch -d -n 0.5 nvidia-smi (preinstalled)

		#Nvidia drivers
		a. sudo apt-get install ubuntu-drivers-common
		b. ubuntu-drivers devices
		c. sudo apt-get install nvidia-driver-<latest> (390)
		d. reboot
		e. nvidia-smi to confirm success

		#CUDA
		a. sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
		b. wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
		c. sudo apt install ./cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
		d. wget http://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64/nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb
		e. sudo apt install ./nvidia-machine-learning-repo-ubuntu1604_1.0.0-1_amd64.deb
		f .sudo apt update
		g. sudo apt install cuda9.0 cuda-cublas-9-0 cuda-cufft-9-0 cuda-curand-9-0 \
			    cuda-cusolver-9-0 cuda-cusparse-9-0 libcudnn7=7.2.1.38-1+cuda9.0 \
			    libnccl2=2.2.13-1+cuda9.0 cuda-command-line-tools-9-0
		h. sudo apt update
		i. sudo apt install libnvinfer4=4.1.2-1+cuda9.0

		#docker ce
		a. sudo apt-get install \
			    apt-transport-https \
			    ca-certificates \
			    curl \
			    gnupg2 \
			    software-properties-common
		b. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		c. sudo apt-key fingerprint 0EBFCD88 (output: 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88)
		d. sudo add-apt-repository \
			   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
			   $(lsb_release -cs) \
			   stable"
		e. sudo apt-get update
		f. sudo apt-get install docker-ce

		#nvidia docker
		a. curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \
			  sudo apt-key add -
			distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
			curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \
			sudo tee /etc/apt/sources.list.d/nvidia-docker.list
			sudo apt-get update

		b. sudo apt-get install -y nvidia-docker2
		c. sudo pkill -SIGHUP dockerd
		d. test using: docker run --runtime=nvidia --rm nvidia/cuda:9.0-base nvidia-smi

		#github repo setup

		Github
			1. ssh setup
				a. ssh-keygen -t rsa -b 4096 -C "ben96ryan@gmail.com"
				b. eval $(ssh-agent -s)
				c. ssh-add ~/.ssh/id_rsa
				d. clip < ~/.ssh/id_rsa.pub // cat and copy
				e. add to github account

			2. repo setup
				a. git init
				b. git remote add origin git@github.com:benjimr/FYP-Weapon-Detection.git
				c. May require: git config --global user.email "ben96ryan@gmail.com"
				d. May require: git config --global user.name "Ben Ryan"
				e. git pull origin master
				f. git push --set-upstream origin master


		3.Docker (Dockerfile below)
			a. sudo docker build -t server-image .
			b. sudo docker run --runtime=nvidia -p 5000:5000 -p 5001:5001 server-image
			c. sudo docker save server-image > server-image.tar
			d. sudo docker load < server-image.tar


	4. FUSE
		a. export GCSFUSE_REPO=gcsfuse-`lsb_release -c -s`
		b. echo "deb http://packages.cloud.google.com/apt $GCSFUSE_REPO main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list
		c. curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
		d. sudo apt-get update
		e. sudo apt-get install gcsfuse

		mount/unmount using
		a. gcsfuse <bucket-name> <mount-dir>
		b. sudo umount <mount-dir>

		extracting
		a. 7z x -o<target path> archive


 5. Mounting new disk
	 a. lsblk to get device id
	 b. sudo mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/[DEVICE_ID]
	 c. make a directory to mount it to (mkdir)
	 d. sudo mount -o discard,defaults /dev/[DEVICE_ID] /mnt/disks/[MNT_DIR]
	 e. sudo chmod a+w /mnt/disks/[MNT_DIR]
	 f. programs expect /Dataset and /Prepared-Data to exist on drive
